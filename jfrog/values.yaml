artifactory:
  access:
    accessConfig:
      security:
        tls: true
      customCertificatesSecretName: openet-ca-cert-secret
    database:
      maxOpenConnections: 80
    enabled: true
    tomcat:
      connector:
        extraConfig: acceptCount="100"
        maxThreads: 50
        sendReasonPhrase: false
  additionalResources: ""
  artifactory:
    admin:
      dataKey: null
      ip: 127.0.0.1
      password: null
      secret: null
      username: admin
    affinity: {}
    annotations: {}
    catalinaLoggers: []
    catalinaLoggersResources: {}
    circleOfTrustCertificatesSecret: null
    coldStorage:
      enabled: false
    configMapName: null
    configMaps: ""
    consoleLog: false
    copyOnEveryStartup: null
    customCertificates:
      enabled: false
    customInitContainers: ""
    customInitContainersBegin: ""
    customPersistentVolumeClaim: {}
    customSecrets: null
    customSidecarContainers: ""
    customVolumeMounts: ""
    customVolumes: ""
    database:
      maxOpenConnections: 80
    deleteDBPropertiesOnStartup: true
    externalArtifactoryPort: 8081
    externalPort: 8082
    extraEnvironmentVariables: null
    gid: 1030
    haBackupDir:
      enabled: false
      path: null
    haDataDir:
      enabled: false
      path: null
    image:
      pullPolicy: IfNotPresent
      registry: releases-docker.jfrog.io
      repository: jfrog/artifactory-jcr
    internalArtifactoryPort: 8081
    internalPort: 8082
    javaOpts:
      jmx:
        accessFile: null
        authenticate: false
        enabled: false
        host: null
        passwordFile: null
        port: 9010
        ssl: false
    labels: {}
    license:
      dataKey: null
      licenseKey: null
      secret: null
    lifecycle: {}
    livenessProbe:
      config: |
        exec:
          command:
            - sh
            - -c
            - curl -s -k --fail --max-time {{ .Values.probes.timeoutSeconds }} http://localhost:{{ .Values.artifactory.tomcat.maintenanceConnector.port }}/artifactory/api/v1/system/liveness
        initialDelaySeconds: {{ if semverCompare "<v1.20.0-0" .Capabilities.KubeVersion.Version }}180{{ else }}0{{ end }}
        periodSeconds: 10
        timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
        failureThreshold: 5
        successThreshold: 1
      enabled: true
    loggers: []
    loggersResources: {}
    migration:
      enabled: true
      timeoutSeconds: 3600
    name: artifactory
    nodeSelector: {}
    openMetrics:
      enabled: false
      filebeat:
        elasticsearch:
          password: ""
          url: Elasticsearch url where JFrog Insight is installed For example, http://<ip_address>:8082
          username: ""
        enabled: false
        log:
          enabled: false
          level: info
    persistence:
      accessMode: ReadWriteOnce
      annotations: {}
      cacheProviderDir: cache
      customBinarystoreXmlSecret: null
      enabled: true
      fileSystem:
        cache:
          enabled: false
      lenientLimit: 1
      maxCacheSize: 5000000000
      mountPath: /var/opt/jfrog/artifactory
    replicaCount: 1
    resources: {}
    schedulerName: null
    service:
      annotations: {}
      loadBalancerSourceRanges: []
      name: artifactory
      type: NodePort
      nodePort: 30098
    setSecurityContext: true
    ssh:
      enabled: false
      externalPort: 1339
      internalPort: 1339
    statefulset:
      annotations: {}
    terminationGracePeriodSeconds: 30
    tolerations: []
    tomcat:
      connector:
        extraConfig: acceptCount="100"
        maxThreads: 200
        sendReasonPhrase: false
      maintenanceConnector:
        port: 8091
    topologySpreadConstraints: []
    uid: 1030
    unifiedSecretInstallation: false
    updateStrategy:
      type: RollingUpdate
    userPluginSecrets: null
  autoscaling:
    enabled: false
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    enabled: true
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
  customIngress: ""
  databaseUpgradeReady: "yes"
  filebeat:
    enabled: false
  frontend:
    enabled: true
    extraEnvironmentVariables: null
    internalPort: 8070
    lifecycle: {}
    name: frontend
    resources: {}
    session:
      timeoutMinutes: "30"
  global:
    customCertificates:
      enabled: false
    nodeSelector: {}
    versions: {}
  hostAliases: []
  ingress:
    additionalRules: []
    annotations: {}
    artifactoryPath: /artifactory/
    className: ""
    defaultBackend:
      enabled: true
    enabled: true
    hosts: []
    labels: {}
    routerPath: /
    tls: null
  initContainerImage: releases-docker.jfrog.io/ubi9/ubi-minimal:9.2.691
  initContainers:
    resources:
      limits:
        cpu: "1"
        memory: 1Gi
      requests:
        cpu: 10m
        memory: 50Mi
  installer:
    platform: jcr-helm
    type: null
  networkpolicy: []
  nginx:
    affinity: {}
    annotations: {}
    customArtifactoryConfigMap: null
    customCommand: null
    customConfigMap: null
    customInitContainers: ""
    customPorts: []
    customSidecarContainers: ""
    customVolumeMounts: ""
    customVolumes: ""
    deployment:
      annotations: {}
    disableProxyBuffering: false
    enabled: true
    gid: 107
    http:
      enabled: true
      externalPort: 80
      internalPort: 80
    https:
      enabled: true
      externalPort: 443
      internalPort: 443
    image:
      pullPolicy: IfNotPresent
      registry: releases-docker.jfrog.io
      repository: jfrog/nginx-artifactory-pro
    kind: Deployment
    labels: {}
    lifecycle: {}
    loggers: []
    loggersResources: {}
    logs:
      level: warn
      stderr: false
    minAvailable: 0
    name: nginx
    nodeSelector: {}
    persistence:
      accessMode: ReadWriteOnce
      enabled: false
      mountPath: /var/opt/jfrog/nginx
      size: 5Gi
    priorityClassName: null
    readinessProbe:
      config: |
        exec:
          command:
            - sh
            - -c
            - curl -s -k --fail --max-time {{ .Values.probes.timeoutSeconds }} {{ include "nginx.scheme" . }}://localhost:{{ include "nginx.port" . }}/router/api/v1/system/readiness
        initialDelaySeconds: {{ if semverCompare "<v1.20.0-0" .Capabilities.KubeVersion.Version }}90{{ else }}0{{ end }}
        periodSeconds: 10
        timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
        failureThreshold: 5
        successThreshold: 1
      enabled: true
    replicaCount: 1
    resources: {}
    securityContext: {}
    service:
      annotations: {}
      customPorts: []
      externalTrafficPolicy: Cluster
      loadBalancerIP: null
      loadBalancerSourceRanges: []
      ssloffload: false
      type: LoadBalancer
    ssh:
      externalPort: 1339
      internalPort: 1339
    startupProbe:
      config: |
        exec:
          command:
            - sh
            - -c
            - curl -s -k --fail --max-time {{ .Values.probes.timeoutSeconds }} {{ include "nginx.scheme" . }}://localhost:{{ include "nginx.port" . }}/router/api/v1/system/readiness
        initialDelaySeconds: 30
        failureThreshold: 90
        periodSeconds: 5
        timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
      enabled: true
    terminationGracePeriodSeconds: 30
    tlsSecretName: ""
    tolerations: []
    topologySpreadConstraints: []
    uid: 104
  observability:
    enabled: true
    extraEnvironmentVariables: null
    internalPort: 8036
    lifecycle: {}
    livenessProbe:
      config: |
        exec:
          command:
            - sh
            - -c
            - curl --fail --max-time {{ .Values.probes.timeoutSeconds }} http://localhost:{{ .Values.observability.internalPort }}/api/v1/system/liveness
        initialDelaySeconds: {{ if semverCompare "<v1.20.0-0" .Capabilities.KubeVersion.Version }}180{{ else }}0{{ end }}
        failureThreshold: 5
        timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
        periodSeconds: 10
        successThreshold: 1
      enabled: true
    name: observability
    resources: {}
    startupProbe:
      config: |
        exec:
          command:
            - sh
            - -c
            - curl --fail --max-time {{ .Values.probes.timeoutSeconds }} http://localhost:{{ .Values.observability.internalPort }}/api/v1/system/readiness
        initialDelaySeconds: 30
        failureThreshold: 90
        periodSeconds: 5
        timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
      enabled: true
  postgresql:
    audit:
      clientMinMessages: error
      logConnections: false
      logDisconnections: false
      logHostname: false
      logLinePrefix: ""
      logTimezone: ""
      pgAuditLog: ""
      pgAuditLogCatalog: "off"
    common:
      exampleValue: common-chart
      global:
        customCertificates:
          enabled: false
        nodeSelector: {}
        postgresql: {}
        versions: {}
    commonAnnotations: {}
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      enabled: true
      runAsNonRoot: true
      runAsUser: 1001
      seccompProfile:
        type: RuntimeDefault
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    enabled: true
    extraDeploy: []
    extraEnv: []
    global:
      customCertificates:
        enabled: false
      nodeSelector: {}
      postgresql: {}
      versions: {}
    image:
      debug: false
      pullPolicy: IfNotPresent
      registry: releases-docker.jfrog.io
      repository: bitnami/postgresql
      tag: 13.10.0-debian-11-r14
    ldap:
      baseDN: ""
      bind_password: null
      bindDN: ""
      enabled: false
      port: ""
      prefix: ""
      scheme: ""
      search_attr: ""
      search_filter: ""
      server: ""
      suffix: ""
      tls: {}
      url: ""
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    metrics:
      enabled: false
      extraEnvVars: {}
      image:
        pullPolicy: IfNotPresent
        registry: docker.io
        repository: bitnami/postgres-exporter
        tag: 0.9.0-debian-10-r43
      livenessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      prometheusRule:
        additionalLabels: {}
        enabled: false
        namespace: ""
        rules: []
      readinessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      securityContext:
        enabled: false
        runAsUser: 1001
      service:
        annotations:
          prometheus.io/port: "9187"
          prometheus.io/scrape: "true"
        loadBalancerIP: null
        type: ClusterIP
      serviceMonitor:
        additionalLabels: {}
        enabled: false
    networkPolicy:
      allowExternal: true
      enabled: false
      explicitNamespacesSelector: {}
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      enabled: true
      mountPath: /bitnami/postgresql
      selector: {}
      size: 200Gi
      subPath: ""
    postgresqlDataDir: /bitnami/postgresql/data
    postgresqlDatabase: artifactory
    postgresqlDbUserConnectionLimit: null
    postgresqlExtendedConf:
      listenAddresses: '*'
      maxConnections: "1500"
    postgresqlMaxConnections: null
    postgresqlPassword: ""
    postgresqlPghbaRemoveFilters: null
    postgresqlPostgresConnectionLimit: null
    postgresqlSharedPreloadLibraries: pgaudit
    postgresqlStatementTimeout: null
    postgresqlTcpKeepalivesCount: null
    postgresqlTcpKeepalivesIdle: null
    postgresqlTcpKeepalivesInterval: null
    postgresqlUsername: artifactory
    primary:
      affinity: {}
      annotations: {}
      extraInitContainers: []
      extraVolumeMounts: []
      extraVolumes: []
      labels: {}
      nodeAffinityPreset:
        key: ""
        type: ""
        values: []
      nodeSelector: {}
      podAffinityPreset: ""
      podAnnotations: {}
      podAntiAffinityPreset: soft
      podLabels: {}
      priorityClassName: ""
      service: {}
      sidecars: []
      tolerations: []
    primaryAsStandBy:
      enabled: false
    psp:
      create: false
    rbac:
      create: false
    readReplicas:
      affinity: {}
      annotations: {}
      extraInitContainers: []
      extraVolumeMounts: []
      extraVolumes: []
      labels: {}
      nodeAffinityPreset:
        key: ""
        type: ""
        values: []
      nodeSelector: {}
      persistence:
        enabled: true
      podAffinityPreset: ""
      podAnnotations: {}
      podAntiAffinityPreset: soft
      podLabels: {}
      priorityClassName: ""
      resources: {}
      service: {}
      sidecars: []
      tolerations: []
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    replication:
      applicationName: my_application
      enabled: false
      numSynchronousReplicas: 0
      password: repl_password
      readReplicas: 1
      synchronousCommit: "off"
      user: repl_user
    resources:
      requests:
        cpu: 250m
        memory: 256Mi
    securityContext:
      enabled: true
      fsGroup: 1001
    service:
      annotations: {}
      port: 5432
      type: ClusterIP
    serviceAccount:
      enabled: false
    shmVolume:
      chmod:
        enabled: true
      enabled: true
    startupProbe:
      enabled: false
      failureThreshold: 10
      initialDelaySeconds: 30
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 5
    tls:
      certCAFilename: null
      certFilename: ""
      certKeyFilename: ""
      certificatesSecret: ""
      crlFilename: null
      enabled: false
      preferServerCiphers: true
    updateStrategy:
      type: RollingUpdate
    volumePermissions:
      enabled: false
      image:
        pullPolicy: Always
        registry: docker.io
        repository: bitnami/bitnami-shell
        tag: "10"
      securityContext:
        runAsUser: 0
  probes:
    timeoutSeconds: 5
  rbac:
    create: false
    role:
      rules:
      - apiGroups:
        - ""
        resources:
        - services
        - endpoints
        - pods
        verbs:
        - get
        - watch
        - list
  router:
    customVolumeMounts: ""
    externalPort: 8082
    extraEnvironmentVariables: null
    image:
      imagePullPolicy: IfNotPresent
      registry: releases-docker.jfrog.io
      repository: jfrog/router
      tag: 7.71.0
    internalPort: 8082
    lifecycle:
      preStop:
        exec:
          command:
          - sh
          - -c
          - while [[ $(curl --fail --silent --connect-timeout 2 http://localhost:8081/artifactory/api/v1/system/liveness)
            =~ OK ]]; do echo Artifactory is still alive; sleep 2; done
    livenessProbe:
      config: |
        exec:
          command:
            - sh
            - -c
            - curl -s -k --fail --max-time {{ .Values.probes.timeoutSeconds }} {{ include "artifactory.scheme" . }}://localhost:{{ .Values.router.internalPort }}/router/api/v1/system/liveness
        initialDelaySeconds: {{ if semverCompare "<v1.20.0-0" .Capabilities.KubeVersion.Version }}90{{ else }}0{{ end }}
        periodSeconds: 10
        timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
        failureThreshold: 5
        successThreshold: 1
      enabled: true
    name: router
    persistence:
      mountPath: /var/opt/jfrog/router
    readinessProbe:
      config: |
        exec:
          command:
            - sh
            - -c
            - curl -s -k --fail --max-time {{ .Values.probes.timeoutSeconds }} {{ include "artifactory.scheme" . }}://localhost:{{ .Values.router.internalPort }}/router/api/v1/system/readiness
        initialDelaySeconds: {{ if semverCompare "<v1.20.0-0" .Capabilities.KubeVersion.Version }}60{{ else }}0{{ end }}
        periodSeconds: 10
        timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
        failureThreshold: 5
        successThreshold: 1
      enabled: true
    resources: {}
    serviceRegistry:
      insecure: false
    startupProbe:
      config: |
        exec:
          command:
            - sh
            - -c
            - curl -s -k --fail --max-time {{ .Values.probes.timeoutSeconds }} {{ include "artifactory.scheme" . }}://localhost:{{ .Values.router.internalPort }}/router/api/v1/system/readiness
        initialDelaySeconds: 10
        failureThreshold: 30
        periodSeconds: 5
        timeoutSeconds: {{ .Values.probes.timeoutSeconds }}
      enabled: true
    tlsEnabled: false
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: false
    create: false
    name: null
  splitServicesToContainers: true
  systemYamlOverride:
    dataKey: null
    existingSecret: null
  waitForDatabase: true
postgresql:
  enabled: true
router:
  image:
    tag: 7.71.0
